#!/bin/bash

#########################################################
#
# Platform: NCI Gadi HPC
#
# Description: 
#       - See https://github.sydney.edu.au/informatics/PIPE3657-IS-BLAST/blob/master/BLAST-IS-workflow.md#obtain-flanking-sequence-to-create-target-site-multi-fasta
#	- A PBS execution script to run Scripts/extract_flanks.pl
#	- Requires blast+ and a pre-formatted blast nr/nt database
# 	- Using on Gadi: /g/data/er01/NCBI/preformatted_2022_11_21/nt
#	- This is hardcoded in the perl script 
#
# Usage:
#       - qsub Scripts/extract_flanks.pbs
#
# Compute resources:
#       - 1 CPU, 6.5 hours
#	- Ran on 1 CPU 4 GB RAM normal node and duplicate run on 
# 	 1 hugemem CPU with 30 GB RAM - both completed in 6.5 hours
#	- If this analysis is repeated in future with a larger datset, consider
#	- executing as a parallel run 
#
# Output:
#       - Output/Flanking_fastas: a flank fasta for each IS 
#       - Output/IS110_complete.bacterial.blast.filtered.counts.txt: summary file
#
# Author/s: Cali Willet; cali.willet@sydney.edu.au
#
# If you use this script towards a publication, please acknowledge the
# Sydney Informatics Hub (or co-authorship, where appropriate).
#
# Suggested acknowledgement: 
#       - See https://github.sydney.edu.au/informatics/PIPE3657-IS-BLAST#acknowledgements
#
#########################################################


#PBS -P iz89
#PBS -N flanks
#PBS -l ncpus=224
#PBS -l mem=2016GB
#PBS -l walltime=12:00:00
#PBS -l jobfs=3200GB
#PBS -q normalbw
#PBS -W umask=022
#PBS -l wd
#PBS -o ./PBS_logs/extract_flanks_parallel.o
#PBS -e ./PBS_logs/extract_flanks_parallel.e
#PBS -l storage=scratch/er01+gdata/er01

module load blast+/2.13.0 nci-parallel/1.0.0a 

export JOBFS=$PBS_JOBFS


set -e

SCRIPT=./Scripts/extract_flanks_keepNonUnique_parallel.pl
INPUTS=./Output/IS110_complete_Ident95_E0.bacterial.blast-TEMPLIST

NCPUS=1 # CPU per parallel task 


 
#########################################################
# Do not edit below this line
#########################################################

M=$(( PBS_NCI_NCPUS_PER_NODE / NCPUS )) #tasks per node

sed "s|^|${SCRIPT} |" ${INPUTS} > ${PBS_JOBFS}/input-file

mpirun --np $((M * PBS_NCPUS / PBS_NCI_NCPUS_PER_NODE)) \
        --map-by node:PE=${NCPUS} \
        nci-parallel \
        --verbose \
        --input-file ${PBS_JOBFS}/input-file







